{"version":3,"sources":["js/Entities.js"],"names":["Entity","scene","x","y","key","type","add","existing","physics","world","enableBody","setData","Phaser","GameObjects","Sprite","canDestroy","getData","setTexture","play","sfx","explosions","Math","Between","length","undefined","shootTimer","remove","setAngle","body","setVelocity","on","destroy","setVisible","Player","velocity","time","addEvent","delay","callback","start","callbackScope","loop","Clamp","game","config","width","height","laser","PlayerLaser","playerLasers","EnemyLaser","ChaserShip","states","MOVE_DOWN","CHASE","state","player","Distance","dx","dy","angle","atan2","cos","sin","GunShip","setScale","scaleX","enemyLasers","CarrierShip","ScrollingBackground","velocityY","layers","group","createLayers","i","layer","sprite","displayHeight","flipX","flipY","setDepth","getChildren"],"mappings":";AAqOG,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,WAAA,EAAA,IAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GArOGA,IAAAA,EAqOH,SAAA,GApOWC,SAAAA,EAAAA,EAAOC,EAAGC,EAAGC,EAAKC,GAAM,IAAA,EAAA,OAAA,EAAA,KAAA,IAC5BJ,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAOC,EAAGC,EAAGC,KAEdH,MAAQA,EACRA,EAAAA,MAAMK,IAAIC,SAAf,EAAA,IACKN,EAAAA,MAAMO,QAAQC,MAAMC,WAAiB,EAAA,GAAA,GACrCC,EAAAA,QAAQ,OAAQN,GAChBM,EAAAA,QAAQ,UAAU,GAPW,EAoOnC,OAAA,EAAA,EArOkBC,OAAOC,YAAYC,QAqOrC,EAAA,EAAA,CAAA,CAAA,IAAA,UA1NOC,MAAAA,SAAAA,GACD,KAAKC,QAAQ,YAEXC,KAAAA,WAAW,gBACXC,KAAAA,KAAK,gBAELjB,KAAAA,MAAMkB,IAAIC,WACbR,OAAOS,KAAKC,QAAQ,EAAG,KAAKrB,MAAMkB,IAAIC,WAAWG,OAAS,IAC1DL,YACsBM,IAApB,KAAKC,YACH,KAAKA,YACFA,KAAAA,WAAWC,QAAO,GAGtBC,KAAAA,SAAS,GACTC,KAAAA,KAAKC,YAAY,EAAG,GACpBC,KAAAA,GACH,oBACA,WACMf,EACGgB,KAAAA,UAEAC,KAAAA,YAAW,IAGpB,MAEGrB,KAAAA,QAAQ,UAAU,QA+L1B,EAAA,GA1LGsB,EA0LH,SAAA,GAzLWhC,SAAAA,EAAAA,EAAOC,EAAGC,EAAGC,GAAK,IAAA,EAAA,OAAA,EAAA,KAAA,IACtBH,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAOC,EAAGC,EAAGC,EAAK,YAEnBO,QAAQ,QAAS,KAEjBA,EAAAA,QAAQ,cAAc,GACtBA,EAAAA,QAAQ,kBAAmB,IAC3BA,EAAAA,QAAQ,iBAAkB,EAAKK,QAAQ,mBAAqB,GAPrC,EAyL7B,OAAA,EAAA,EA1LkBhB,GA0LlB,EAAA,EAAA,CAAA,CAAA,IAAA,SA/KQ,MAAA,WACF4B,KAAAA,KAAKM,SAAS/B,GAAK,KAAKa,QAAQ,WA8KtC,CAAA,IAAA,WA5KU,MAAA,WACJY,KAAAA,KAAKM,SAAS/B,EAAI,KAAKa,QAAQ,WA2KrC,CAAA,IAAA,WAzKU,MAAA,WACJY,KAAAA,KAAKM,SAAShC,GAAK,KAAKc,QAAQ,WAwKtC,CAAA,IAAA,YAtKW,MAAA,WACLY,KAAAA,KAAKM,SAAShC,EAAI,KAAKc,QAAQ,WAqKrC,CAAA,IAAA,YAlKW,MAAA,WACLf,KAAAA,MAAMkC,KAAKC,SAAS,CAEvBC,MAAO,IACPC,SAAU,WACHrC,KAAAA,MAAMA,MAAMsC,MAAM,kBAEzBC,cAAe,KACfC,MAAM,MA0JT,CAAA,IAAA,SAtJQ,MAAA,WAKH,GAJCb,KAAAA,KAAKC,YAAY,EAAG,GACpB3B,KAAAA,EAAIU,OAAOS,KAAKqB,MAAM,KAAKxC,EAAG,EAAG,KAAKD,MAAM0C,KAAKC,OAAOC,OACxD1C,KAAAA,EAAIS,OAAOS,KAAKqB,MAAM,KAAKvC,EAAG,EAAG,KAAKF,MAAM0C,KAAKC,OAAOE,QAEzD,KAAK9B,QAAQ,cACX,GAAA,KAAKA,QAAQ,kBAAoB,KAAKA,QAAQ,mBAC3CL,KAAAA,QAAQ,iBAAkB,KAAKK,QAAQ,kBAAoB,OAC3D,CAED+B,IAAAA,EAAQ,IAAIC,EAAY,KAAK/C,MAAO,KAAKC,EAAG,KAAKC,GAChDF,KAAAA,MAAMgD,aAAa3C,IAAIyC,GAEvB9C,KAAAA,MAAMkB,IAAI4B,MAAM7B,OAChBP,KAAAA,QAAQ,iBAAkB,QAwIpC,EAAA,GAlIGqC,EAkIH,SAAA,GAjIW/C,SAAAA,EAAAA,EAAOC,EAAGC,GAAG,IAAA,EAAA,OAAA,EAAA,KAAA,IACjBF,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAOC,EAAGC,EAAG,oBACdyB,KAAKM,SAAS/B,GAAK,IAFD,EAiIxB,OAAA,EAAA,EAlIuBH,GAkIvB,EAAA,GA3HGkD,EA2HH,SAAA,GA1HWjD,SAAAA,EAAAA,EAAOC,EAAGC,GAAG,IAAA,EAAA,OAAA,EAAA,KAAA,IACjBF,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAOC,EAAGC,EAAG,oBACdyB,KAAKM,SAAS/B,EAAI,IAFA,EA0HxB,OAAA,EAAA,EA3HsBH,GA2HtB,EAAA,GApHGmD,EAoHH,SAAA,GAnHWlD,SAAAA,EAAAA,EAAOC,EAAGC,GAAG,IAAA,EAAA,OAAA,EAAA,KAAA,IACjBF,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAOC,EAAGC,EAAG,YAAa,gBAE3ByB,KAAKM,SAAS/B,EAAIS,OAAOS,KAAKC,QAAQ,GAAI,KAE1C8B,EAAAA,OAAS,CACZC,UAAW,YACXC,MAAO,SAEJC,EAAAA,MAAQ,EAAKH,OAAOC,UATF,EAmHxB,OAAA,EAAA,EApHsBrD,GAoHtB,EAAA,EAAA,CAAA,CAAA,IAAA,SAvGQ,MAAA,WACH,IAAC,KAAKgB,QAAQ,WAAa,KAAKf,MAAMuD,SAEtC5C,OAAOS,KAAKoC,SAASnC,QACnB,KAAKpB,EACL,KAAKC,EACL,KAAKF,MAAMuD,OAAOtD,EAClB,KAAKD,MAAMuD,OAAOrD,GAChB,MAECoD,KAAAA,MAAQ,KAAKH,OAAOE,OAGvB,KAAKC,OAAS,KAAKH,OAAOE,OAAO,CAC/BI,IAAAA,EAAK,KAAKzD,MAAMuD,OAAOtD,EAAI,KAAKA,EAChCyD,EAAK,KAAK1D,MAAMuD,OAAOrD,EAAI,KAAKA,EAEhCyD,EAAQvC,KAAKwC,MAAMF,EAAID,GAGtB9B,KAAAA,KAAKC,YADE,IACUR,KAAKyC,IAAIF,GADnB,IACmCvC,KAAK0C,IAAIH,IAEpD,KAAK1D,EAAI,KAAKD,MAAMuD,OAAOtD,EACxB0D,KAAAA,OAAS,EAETA,KAAAA,OAAS,OA8ErB,EAAA,GAvEGI,EAuEH,SAAA,GAtEW/D,SAAAA,EAAAA,EAAOC,EAAGC,GAAG,IAAA,EAAA,OAAA,EAAA,KAAA,IACjBF,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAOC,EAAGC,EAAG,YAAa,aAC3Be,KAAK,aAELU,EAAAA,KAAKM,SAAS/B,EAAIS,OAAOS,KAAKC,QAAQ,GAAI,KAE1CG,EAAAA,WAAa,EAAKxB,MAAMkC,KAAKC,SAAS,CACzCC,MAAO,IACPC,SAAU,WACJS,IAAAA,EAAQ,IAAIG,EAAW,KAAKjD,MAAO,KAAKC,EAAG,KAAKC,GACpD4C,EAAMkB,SAAS,KAAKC,QACfjE,KAAAA,MAAMkE,YAAY7D,IAAIyC,IAE7BP,cAPyC,EAAA,GAQzCC,MAAM,IAde,EAsExB,OAAA,EAAA,EAvEmBzC,GAuEnB,EAAA,EAAA,CAAA,CAAA,IAAA,YApDW,MAAA,gBACcwB,IAApB,KAAKC,YACH,KAAKA,YACFA,KAAAA,WAAWC,QAAO,OAiD5B,EAAA,GA3CG0C,EA2CH,SAAA,GA1CWnE,SAAAA,EAAAA,EAAOC,EAAGC,GAAG,IAAA,EAAA,OAAA,EAAA,KAAA,IACjBF,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAOC,EAAGC,EAAG,YAAa,iBAC3Be,KAAK,aAELU,EAAAA,KAAKM,SAAS/B,EAAIS,OAAOS,KAAKC,QAAQ,GAAI,KAJxB,EA0CxB,OAAA,EAAA,EA3CuBtB,GA2CvB,EAAA,GAlCGqE,EAkCH,WAjCWpE,SAAAA,EAAAA,EAAOG,EAAKkE,GAAW,EAAA,KAAA,GAC5BrE,KAAAA,MAAQA,EACRG,KAAAA,IAAMA,EACNkE,KAAAA,UAAYA,EAEZC,KAAAA,OAAS,KAAKtE,MAAMK,IAAIkE,QAExBC,KAAAA,eA0BN,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,eAvBc,MAAA,WACR,IAAA,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAEtBC,IAAAA,EAAQ,KAAK1E,MAAMK,IAAIsE,OAAO,EAAG,EAAG,KAAKxE,KAC7CuE,EAAMxE,EAAIwE,EAAME,cAAgBH,EAC5BI,IAAAA,EAAQlE,OAAOS,KAAKC,QAAQ,EAAG,KAAO,GAAK,EAAI,EAC/CyD,EAAQnE,OAAOS,KAAKC,QAAQ,EAAG,KAAO,GAAK,EAAI,EACnDqD,EAAMV,SAAiB,EAARa,EAAmB,EAARC,GAC1BJ,EAAMK,UAAU,GAAKN,EAAI,IACpBzE,KAAAA,MAAMO,QAAQC,MAAMC,WAAWiE,EAAO,GAC3CA,EAAM/C,KAAKM,SAAS/B,EAAI,KAAKmE,UAExBC,KAAAA,OAAOjE,IAAIqE,MAWnB,CAAA,IAAA,SAPQ,MAAA,WACH,GAAA,KAAKJ,OAAOU,cAAc,GAAG9E,EAAI,EAC9B,IAAA,IAAIuE,EAAI,EAAGA,EAAI,KAAKH,OAAOU,cAAc1D,OAAQmD,IAAK,CACrDC,IAAAA,EAAQ,KAAKJ,OAAOU,cAAcP,GACtCC,EAAMxE,GAAKwE,EAAME,cAAgBF,EAAME,cAAgBH,OAG5D,EAAA","file":"Entities.js","sourceRoot":"..","sourcesContent":["class Entity extends Phaser.GameObjects.Sprite {\n  constructor(scene, x, y, key, type) {\n    super(scene, x, y, key);\n\n    this.scene = scene;\n    this.scene.add.existing(this);\n    this.scene.physics.world.enableBody(this, 0);\n    this.setData('type', type);\n    this.setData('isDead', false);\n  }\n\n  explode(canDestroy) {\n    if (!this.getData('isDead')) {\n      // Set the texture to the explosion image, then play the animation\n      this.setTexture('sprExplosion'); // this refers to the same animation key we used when we added this.anims.create previously\n      this.play('sprExplosion'); // play the animation\n      // pick a random explosion sound within the array we defined in this.sfx in SceneMain\n      this.scene.sfx.explosions[\n        Phaser.Math.Between(0, this.scene.sfx.explosions.length - 1)\n      ].play();\n      if (this.shootTimer !== undefined) {\n        if (this.shootTimer) {\n          this.shootTimer.remove(false);\n        }\n      }\n      this.setAngle(0);\n      this.body.setVelocity(0, 0);\n      this.on(\n        'animationcomplete',\n        function() {\n          if (canDestroy) {\n            this.destroy();\n          } else {\n            this.setVisible(false);\n          }\n        },\n        this\n      );\n      this.setData('isDead', true);\n    }\n  }\n}\n\nclass Player extends Entity {\n  constructor(scene, x, y, key) {\n    super(scene, x, y, key, 'Player');\n\n    this.setData('speed', 200);\n\n    this.setData('isShooting', false);\n    this.setData('timerShootDelay', 10);\n    this.setData('timerShootTick', this.getData('timerShootDelay') - 1);\n  }\n\n  moveUp() {\n    this.body.velocity.y = -this.getData('speed');\n  }\n  moveDown() {\n    this.body.velocity.y = this.getData('speed');\n  }\n  moveLeft() {\n    this.body.velocity.x = -this.getData('speed');\n  }\n  moveRight() {\n    this.body.velocity.x = this.getData('speed');\n  }\n\n  onDestroy() {\n    this.scene.time.addEvent({\n      // go to game over scene\n      delay: 1000,\n      callback: function() {\n        this.scene.scene.start('SceneGameOver');\n      },\n      callbackScope: this,\n      loop: false\n    });\n  }\n\n  update() {\n    this.body.setVelocity(0, 0);\n    this.x = Phaser.Math.Clamp(this.x, 0, this.scene.game.config.width);\n    this.y = Phaser.Math.Clamp(this.y, 0, this.scene.game.config.height);\n\n    if (this.getData('isShooting')) {\n      if (this.getData('timerShootTick') < this.getData('timerShootDelay')) {\n        this.setData('timerShootTick', this.getData('timerShootTick') + 1); // every game update, increase timerShootTick by one until we reach the value of timerShootDelay\n      } else {\n        // when the \"manual timer\" is triggered:\n        var laser = new PlayerLaser(this.scene, this.x, this.y);\n        this.scene.playerLasers.add(laser);\n\n        this.scene.sfx.laser.play(); // play the laser sound effect\n        this.setData('timerShootTick', 0);\n      }\n    }\n  }\n}\n\nclass PlayerLaser extends Entity {\n  constructor(scene, x, y) {\n    super(scene, x, y, 'sprLaserPlayer');\n    this.body.velocity.y = -200;\n  }\n}\n\nclass EnemyLaser extends Entity {\n  constructor(scene, x, y) {\n    super(scene, x, y, 'sprLaserEnemy0');\n    this.body.velocity.y = 200;\n  }\n}\n\nclass ChaserShip extends Entity {\n  constructor(scene, x, y) {\n    super(scene, x, y, 'sprEnemy1', 'ChaserShip');\n\n    this.body.velocity.y = Phaser.Math.Between(50, 100);\n\n    this.states = {\n      MOVE_DOWN: 'MOVE_DOWN',\n      CHASE: 'CHASE'\n    };\n    this.state = this.states.MOVE_DOWN;\n  }\n\n  update() {\n    if (!this.getData('isDead') && this.scene.player) {\n      if (\n        Phaser.Math.Distance.Between(\n          this.x,\n          this.y,\n          this.scene.player.x,\n          this.scene.player.y\n        ) < 320\n      ) {\n        this.state = this.states.CHASE;\n      }\n\n      if (this.state == this.states.CHASE) {\n        var dx = this.scene.player.x - this.x;\n        var dy = this.scene.player.y - this.y;\n\n        var angle = Math.atan2(dy, dx);\n\n        var speed = 100;\n        this.body.setVelocity(Math.cos(angle) * speed, Math.sin(angle) * speed);\n\n        if (this.x < this.scene.player.x) {\n          this.angle -= 5;\n        } else {\n          this.angle += 5;\n        }\n      }\n    }\n  }\n}\n\nclass GunShip extends Entity {\n  constructor(scene, x, y) {\n    super(scene, x, y, 'sprEnemy0', 'GunShip');\n    this.play('sprEnemy0');\n\n    this.body.velocity.y = Phaser.Math.Between(50, 100);\n\n    this.shootTimer = this.scene.time.addEvent({\n      delay: 1000,\n      callback: function() {\n        var laser = new EnemyLaser(this.scene, this.x, this.y);\n        laser.setScale(this.scaleX);\n        this.scene.enemyLasers.add(laser);\n      },\n      callbackScope: this,\n      loop: true\n    });\n  }\n\n  onDestroy() {\n    if (this.shootTimer !== undefined) {\n      if (this.shootTimer) {\n        this.shootTimer.remove(false);\n      }\n    }\n  }\n}\n\nclass CarrierShip extends Entity {\n  constructor(scene, x, y) {\n    super(scene, x, y, 'sprEnemy2', 'CarrierShip');\n    this.play('sprEnemy2');\n\n    this.body.velocity.y = Phaser.Math.Between(50, 100);\n  }\n}\n\nclass ScrollingBackground {\n  constructor(scene, key, velocityY) {\n    this.scene = scene;\n    this.key = key;\n    this.velocityY = velocityY;\n\n    this.layers = this.scene.add.group();\n\n    this.createLayers();\n  }\n\n  createLayers() {\n    for (var i = 0; i < 2; i++) {\n      // creating two backgrounds will allow a continuous flow giving the illusion that they are moving.\n      var layer = this.scene.add.sprite(0, 0, this.key);\n      layer.y = layer.displayHeight * i;\n      var flipX = Phaser.Math.Between(0, 10) >= 5 ? -1 : 1;\n      var flipY = Phaser.Math.Between(0, 10) >= 5 ? -1 : 1;\n      layer.setScale(flipX * 2, flipY * 2);\n      layer.setDepth(-5 - (i - 1));\n      this.scene.physics.world.enableBody(layer, 0);\n      layer.body.velocity.y = this.velocityY;\n\n      this.layers.add(layer);\n    }\n  }\n\n  update() {\n    if (this.layers.getChildren()[0].y > 0) {\n      for (var i = 0; i < this.layers.getChildren().length; i++) {\n        var layer = this.layers.getChildren()[i];\n        layer.y = -layer.displayHeight + layer.displayHeight * i;\n      }\n    }\n  }\n}\n"]}